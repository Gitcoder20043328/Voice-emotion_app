{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":256618,"sourceType":"datasetVersion","datasetId":107620}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport librosa\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"target_emotions = ['happy', 'sad', 'angry']\ndf = df[df['emotion'].isin(['happy', 'sad', 'angry'])]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#  Remap emotion labels to numbers\nlabel_map = {'angry': 0, 'happy': 1, 'sad': 2}\ndf['emotion'] = df['emotion'].map(label_map)\n\n# \nprint(\"After mapping:\", df['emotion'].unique())\nprint(\"New dtype:\", df['emotion'].dtype)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Unique values in df['emotion']:\", df['emotion'].unique())\nprint(\"Data type:\", df['emotion'].dtype)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def extract_features(file_path):\n    try:\n        y, sr = librosa.load(file_path, res_type='kaiser_fast')\n        mfcc = np.mean(librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40).T, axis=0)\n        chroma = np.mean(librosa.feature.chroma_stft(y=y, sr=sr).T, axis=0)\n        mel = np.mean(librosa.feature.melspectrogram(y=y, sr=sr).T, axis=0)\n        return np.hstack([mfcc, chroma, mel])\n    except:\n        return np.zeros(180)  # fallback in case of error","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features = []\nlabels = []\n\nbase_path = \"/kaggle/input/ravdess-emotional-speech-audio/audio_speech_actors_01-24\"\n\nfor actor_folder in tqdm(os.listdir(base_path)):\n    actor_path = os.path.join(base_path, actor_folder)\n    for file in os.listdir(actor_path):\n        file_path = os.path.join(actor_path, file)\n        emotion_code = file.split(\"-\")[2]\n        emotion = emotion_map.get(emotion_code)\n        \n        if emotion:\n            data = extract_features(file_path)\n            features.append(data)\n            labels.append(emotion)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = np.array(features)\ny = np.array(labels)\n\ndf = pd.DataFrame(X)\ndf['emotion'] = y\n\ndf.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df[df['emotion'].isin(['happy', 'sad', 'angry', 'neutral'])]\n\nX = df.drop('emotion', axis=1)\ny = df['emotion']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, stratify=y, random_state=42)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Model Training **","metadata":{}},{"cell_type":"code","source":"# import ML libraries \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# label dataset \nX = df.drop('emotion', axis=1)\ny = df['emotion']","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ntarget_emotions = ['happy', 'sad', 'angry']\ndf = df[df['emotion'].isin(target_emotions)]\n\nprint(df['emotion'].value_counts())  ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Filter only the 3 emotions\ndf = df[df['emotion'].isin(['happy', 'sad', 'angry'])]\n\n# Map emotion names to numbers\nlabel_map = {'angry': 0, 'happy': 1, 'sad': 2}\ndf['emotion'] = df['emotion'].map(label_map)\n\n# Debug check\nprint(\" Mapped labels:\", df['emotion'].unique())\nprint(\"Data type:\", df['emotion'].dtype)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Data now is divided into training and testing \n\n\nX = df.drop('emotion', axis=1)\ny = df['emotion']\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, stratify=y, random_state=42)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pip install xgboost","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')\nmodel.fit(X_train, y_train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred = model.predict(X_test)\n\nfrom sklearn.metrics import accuracy_score, classification_report\n\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred, zero_division=0))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(df['emotion'].unique())\nprint(df['emotion'].dtype)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Voice based detect App**","metadata":{}},{"cell_type":"code","source":"import joblib\n\n# Save model\njoblib.dump(model, \"emotion_model.pkl\")\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}